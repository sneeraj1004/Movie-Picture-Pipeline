name: Frontend-Continuous-Integration
on:
  pull_request:
    branches:
      - main
    paths:
      - "frontend/**"
  workflow_dispatch:   

jobs:
  frontend-lint-job:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: |
          npm install
      - name: run lint manual
        run: |   
          npx eslint . --fix
      - name: run lint write
        run: |   
          npx prettier --write .

      - name: Run lint
        run: |
          npm run lint
  frontend-test-job:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - if: ${{ steps.cache-yarn.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: |
          npm list
      - name: Install dependencies
        run: |
          npm install
      - name: Run tests
        run: |
          npm test
  frontend-build-job:
    runs-on: ubuntu-latest
    needs: [frontend-lint-job,frontend-test-job]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_ECR }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v3
      - name: Set environment variable
        run: |
          SHORT_SHA_COMMIT=$(git rev-parse --short HEAD)
          echo CONTAINER_FE_RELEASE_IMAGE=${{ steps.login-ecr.outputs.registry }}/frontend:${SHORT_SHA_COMMIT} >> $GITHUB_ENV
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          echo "Get backend external ip address"
          aws eks update-kubeconfig --name cluster
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNALIP
          echo "Build a docker container and push it to ECR"
          docker build -t ${CONTAINER_FE_RELEASE_IMAGE} --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          echo "List Docker images"
          docker images
      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend
          restore-keys: |
            docker-${{ github.sha }}-