# Workflow name
name: Frontend Continuous Integration

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
      
  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main 
      
# Jobs defined in the workflow
jobs:
  frontend-lint-job:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

    - name: Cache action to restore cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-   
    
     # Install the dependencies.
    - name: Install dependencies
      run: |
        npm ci

      # Run the linter.
    - name: Run lint
      run: |
        npm run lint

  frontend-test-job:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

    - name: Cache action to restore cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-     
     # Install the dependencies.
    - name: Install dependencies
      run: |
        npm ci
        
      # Run the tests.  
    - name: Run tests
      run: |
        npm test
          
  frontend-build-job:
    runs-on: ubuntu-latest
    needs: [frontend-lint-job,frontend-test-job]
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

    - name: Cache action to restore cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-   
    
     # Install the dependencies.
    - name: Install dependencies
      run: |
        npm ci
        
      # Run the tests.  
    - name: Run tests
      run: |
        npm test
    - name: Docker Build
      run: 
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .
        docker run --name mp-frontend -p 3000:3000 -d mp-frontend