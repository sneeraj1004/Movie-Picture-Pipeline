# Workflow name
name: Frontend-Continuous-Integration

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
      
  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main

# Jobs defined in the workflow
jobs:
  frontend-lint-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list   
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
      - run: cd frontend && npm ci
        # Run the linter.
      - run: cd frontend && npm run lint
      - name: Debug message
        if: env.DEBUG == 'true'
        run: echo "Debugging is enabled."
  frontend-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list}    
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'    
      # Run the tests.
      - name: Run tests
        run: cd frontend && npm test
      - name: Debug message
        if: env.DEBUG == 'true'
        run: echo "Debugging is enabled."
  frontend-build-job:
    runs-on: ubuntu-latest
    needs: [frontend-lint-job, frontend-test-job] #dependent job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - if: ${{ steps.cache-yarn.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list   
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
      - run: cd frontend && npm ci      
      # Run the tests.
      - name: Run tests
        run: cd frontend && npm test
      - name: Debug message
        if: env.DEBUG == 'true'
        run: echo "Debugging is enabled." 
      
      - name: Build docker backend image #Tag the built docker image with the git sha (use GitHub Context)
        run: cd frontend && docker build --tag=mp-frontend:latest .        